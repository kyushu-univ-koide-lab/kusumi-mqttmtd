#ifndef TOKENMGR_H
#define TOKENMGR_H

#include <string.h>
#include <sys/time.h>
#include <unistd.h>

#include "esp_crt_bundle.h"
#include "esp_err.h"
#include "esp_log.h"
#include "esp_netif_sntp.h"
#include "esp_sntp.h"
#include "esp_tls.h"
#include "esp_wifi.h"
#include "mbedtls/aes.h"
#include "mbedtls/base64.h"
#include "mdns.h"
#include "mqtt_client.h"
#include "nvs_flash.h"

/*
	MQTT-MTD Parameters
*/
#define TIMESTAMP_LEN 6
#define RANDOM_BYTES_LEN 6
#define TOKEN_SIZE (TIMESTAMP_LEN + RANDOM_BYTES_LEN)
#define BASE64_ENCODED_TOKEN_SIZE ((TOKEN_SIZE + 2) / 3 * 4) + 1
#define TIME_REVOCATION (7 * 24 * 60 * 60)	// 1 week in seconds
#define TOKEN_NUM_MULTIPLIER 16
// Definition expected in config.h
extern const char *ISSUER_HOST;
// Definition expected in config.h
extern const int ISSUER_PORT;

typedef enum {
	PAYLOAD_AEAD_NONE = 0x0,
	// Referred to TLSv1.3 cipher suites. Only AEAD.

	PAYLOAD_AEAD_AES_128_GCM = 0x1
	// PAYLOAD_AEAD_AES_256 = 0x2,
	// PAYLOAD_AEAD_CHACHA20_POLY1305 = 0x3,
} payload_aead_type_t;

typedef struct {
	bool access_type_is_pub;
	uint16_t num_tokens_divided_by_multiplier;
	payload_aead_type_t payload_aead_type;
} fetch_request_properties_t;

typedef struct {
	const char *topic;

	// Token info
	bool access_type_is_pub;
	uint8_t timestamp[TIMESTAMP_LEN];
	uint8_t *all_random_data;
	uint8_t *cur_random_data;
	uint16_t token_count;
	uint16_t cur_token_idx;

	// Payload Cipher
	payload_aead_type_t payload_aead_type;
	uint8_t *payload_enc_key;

	void *prev;
	void *next;
} token_store_t;

typedef struct {
	token_store_t *head;
	token_store_t *tail;
} token_storage_t;

typedef enum {
	TOKENMGR_STATE_BEFORE_ONETIME_INIT,
	TOKENMGR_STATE_UNINITIALIZED,
	TOKENMGR_STATE_OPERTATIONAL,
} tokenmgr_state_t;

/*
	Embedded client certificate and key
*/
extern const uint8_t client_crt_start[] asm("_binary_client_pem_start");
extern const uint8_t client_crt_end[] asm("_binary_client_pem_end");
extern const uint8_t client_key_start[] asm("_binary_client_key_start");
extern const uint8_t client_key_end[] asm("_binary_client_key_end");

/*
	Definition expected in the App
*/
extern const int CIPHERSUITES_LIST[];

/*
	Wifi Parameters
*/
#define WIFI_CONNECTED_BIT BIT0
#define WIFI_FAIL_BIT BIT1
// Definition expected in config.h
extern const wifi_sta_config_t wifi_sta_config;
#define WIFI_MAX_RETRY 3
#define SNTP_MAX_RETRY 15

/*
	MQTT Parameters
*/
#define MQTT_CONNECTED_BIT BIT0
#define MQTT_FAIL_BIT BIT1
// Definition expected in config.h
extern const char *PLAIN_BROKER_URI;
// Definition expected in config.h
extern const char *TLS_BROKER_URI;
// Definition expected in the app
typedef enum {
	MQTT_CLIENT_PLAIN,
	MQTT_CLIENT_TLS
} mqtt_client_type_t;

/*
	Function Declarations
*/
void tokenmgr_app_init(void);
void tokenmgr_init(void);
void tokenmgr_deinit(void);
void print_time_record_summary(void);
void reset_time_record_store(void);

esp_err_t get_token(const char *, fetch_request_properties_t, uint8_t *, uint8_t *);
esp_err_t b64encode_token(const uint8_t *, uint8_t *);
esp_err_t seal_message(payload_aead_type_t, const uint8_t *, const uint16_t, const uint8_t *, int *, uint8_t *);
esp_err_t mqtt_publish_qos0(mqtt_client_type_t, const char *, const uint8_t *, int);
#endif